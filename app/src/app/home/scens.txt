sky with stars : {
    const radius = 6371;

    let SCREEN_HEIGHT = window.innerHeight;
    let SCREEN_WIDTH = window.innerWidth;

    let camera: any;
    let controls: FlyControls;
    let scene;
    let renderer: THREE.WebGLRenderer;
    let dirLight;

    let composer: EffectComposer;

    let d;
    let dPlanet
    let container:any
    const clock = new THREE.Clock();

    init();

    function init() {
      container = document.getElementById( 'container' );
      camera = new THREE.PerspectiveCamera(
        25,
        SCREEN_WIDTH / SCREEN_HEIGHT,
        50,
        1e7
      );
      camera.position.z = radius * 5;

      scene = new THREE.Scene();
      scene.fog = new THREE.FogExp2(0x000000, 0.00000025);

      dirLight = new THREE.DirectionalLight(0xffffff, 3);
      dirLight.position.set(-1, 0, 1).normalize();
      scene.add(dirLight);

      // stars

      const r = radius,
        starsGeometry = [
          new THREE.BufferGeometry(),
          new THREE.BufferGeometry(),
        ];

      const vertices1 = [];
      const vertices2 = [];

      const vertex = new THREE.Vector3();

      for (let i = 0; i < 250; i++) {
        vertex.x = Math.random() * 2 - 1;
        vertex.y = Math.random() * 2 - 1;
        vertex.z = Math.random() * 2 - 1;
        vertex.multiplyScalar(r);

        vertices1.push(vertex.x, vertex.y, vertex.z);
      }

      for (let i = 0; i < 1500; i++) {
        vertex.x = Math.random() * 2 - 1;
        vertex.y = Math.random() * 2 - 1;
        vertex.z = Math.random() * 2 - 1;
        vertex.multiplyScalar(r);

        vertices2.push(vertex.x, vertex.y, vertex.z);
      }

      starsGeometry[0].setAttribute(
        'position',
        new THREE.Float32BufferAttribute(vertices1, 3)
      );
      starsGeometry[1].setAttribute(
        'position',
        new THREE.Float32BufferAttribute(vertices2, 3)
      );

      const starsMaterials = [
        new THREE.PointsMaterial({
          color: 0x9c9c9c,
          size: 2,
          sizeAttenuation: false,
        }),
        new THREE.PointsMaterial({
          color: 0x9c9c9c,
          size: 1,
          sizeAttenuation: false,
        }),
        new THREE.PointsMaterial({
          color: 0x7c7c7c,
          size: 2,
          sizeAttenuation: false,
        }),
        new THREE.PointsMaterial({
          color: 0x838383,
          size: 1,
          sizeAttenuation: false,
        }),
        new THREE.PointsMaterial({
          color: 0x5a5a5a,
          size: 2,
          sizeAttenuation: false,
        }),
        new THREE.PointsMaterial({
          color: 0x5a5a5a,
          size: 1,
          sizeAttenuation: false,
        }),
      ];

      for (let i = 10; i < 30; i++) {
        const stars = new THREE.Points(
          starsGeometry[i % 2],
          starsMaterials[i % 6]
        );

        stars.rotation.x = Math.random() * 6;
        stars.rotation.y = Math.random() * 6;
        stars.rotation.z = Math.random() * 6;
        stars.scale.setScalar(i * 10);

        stars.matrixAutoUpdate = false;
        stars.updateMatrix();

        scene.add(stars);
      }
      

      renderer = new THREE.WebGLRenderer({ antialias: true });
      renderer.setPixelRatio(window.devicePixelRatio);
      renderer.setSize(SCREEN_WIDTH, SCREEN_HEIGHT);
      renderer.setAnimationLoop(animate);
      container.appendChild(renderer.domElement);

      //

      controls = new FlyControls(camera, renderer.domElement);

      controls.movementSpeed = 100;
      controls.domElement = renderer.domElement;
      controls.rollSpeed = Math.PI / 300;
      controls.autoForward = false;
      controls.dragToLook = false;

      //

      window.addEventListener('resize', onWindowResize);

      // postprocessing

      const renderModel = new RenderPass(scene, camera);
      const effectFilm = new FilmPass(0.35);
      const outputPass = new OutputPass();

      composer = new EffectComposer(renderer);

      composer.addPass(renderModel);
      composer.addPass(effectFilm);
      composer.addPass(outputPass);
    }

    function onWindowResize() {
      SCREEN_HEIGHT = window.innerHeight;
      SCREEN_WIDTH = window.innerWidth;

      camera.aspect = SCREEN_WIDTH / SCREEN_HEIGHT;
      camera.updateProjectionMatrix();

      renderer.setSize(SCREEN_WIDTH, SCREEN_HEIGHT);
      composer.setSize(SCREEN_WIDTH, SCREEN_HEIGHT);
    }

    function animate() {
      render();
    }

    function render() {
      // rotate the planet and clouds

      const delta = clock.getDelta();

      // slow down as we approach the surface

      dPlanet = camera.position.length();

      d = dPlanet - radius * 1.01;
      controls.movementSpeed = 0.33 * d;
      controls.update(delta);

      composer.render(delta);
    }
  }

  --------------

  import { Component, OnInit, AfterViewInit } from '@angular/core';
import * as THREE from 'three';
import Stats from 'three/addons/libs/stats.module.js';
import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
import { Water } from 'three/addons/objects/Water.js';
import { Sky } from 'three/addons/objects/Sky.js';
let container: any, stats: Stats;
let camera: any, scene: THREE.Scene, renderer: THREE.WebGLRenderer;
import { TextGeometry } from 'three/addons/geometries/TextGeometry.js';
let controls,
  water: any,
  sun: THREE.Vector3,
  mesh: THREE.Object3D<THREE.Object3DEventMap>;
import { FontLoader } from 'three/addons/loaders/FontLoader.js';
import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';
let textGeo: any;
let group: any;
@Component({
  selector: 'app-home',
  templateUrl: './home.component.html',
  styleUrl: './home.component.scss',
})
export class HomeComponent implements OnInit {
  constructor() {}
  
  scene:any

  ngOnInit(): void {{
    init();


    function init() {
      const loader = new FontLoader();
	  const gltfLoader : any = new  GLTFLoader()
      group = new THREE.Group();
      group.position.y = 100;
	  scene = new THREE.Scene();

      scene.add(group);
	


	  

      loader.load( 
		'assets/fonts/futura.json',
        function (font) {
          const message = 'Sreenath Lavadiya';
          textGeo = new TextGeometry(message, {
            font: font,

            size: 15,
            depth: 3,
            curveSegments: 10,
			
            bevelThickness: 0.1,
            bevelSize: 0.5,
            bevelEnabled: true,
          });
          textGeo.computeBoundingBox();

          let materials = [
            new THREE.MeshPhongMaterial({ color: 0xffffff, flatShading: true, }), // front
            new THREE.MeshPhongMaterial({ color: 0xffffff }), // side
          ];
          const centerOffset =
            -0.5 * (textGeo.boundingBox.max.x - textGeo.boundingBox.min.x);
          const textMesh1 = new THREE.Mesh(textGeo, materials);
          textMesh1.position.x = centerOffset;
          textMesh1.position.y = -90;
          textMesh1.position.z = 0;

          textMesh1.rotation.x = 0;
          textMesh1.rotation.y =0;
		  group.add( textMesh1 );
		  const pointLight = new THREE.PointLight( 0xffffff, 4.5, 0, 0 );
				pointLight.color.setHSL( Math.random(), 1, 0.5 );
				pointLight.position.set( 0, 100, 90 );
				scene.add( pointLight );

 
        }
      ); //end load function

      container = document.getElementById('container');

      //

      renderer = new THREE.WebGLRenderer();
      renderer.setPixelRatio(window.devicePixelRatio);
      renderer.setSize(window.innerWidth, window.innerHeight);
      renderer.setAnimationLoop(animate);
      renderer.toneMapping = THREE.ACESFilmicToneMapping;
      renderer.toneMappingExposure = 0.5;
      container.appendChild(renderer.domElement);

      //

   

      camera = new THREE.PerspectiveCamera(
        55,
        window.innerWidth / window.innerHeight,
        1,
        20000
      );
      camera.position.set(30, 30, 100);

      //

      sun = new THREE.Vector3();

      // Water

      const waterGeometry = new THREE.PlaneGeometry(10000, 10000);

      water = new Water(waterGeometry, {
        textureWidth: 512,
        textureHeight: 512,
        waterNormals: new THREE.TextureLoader().load(
          'https://raw.githubusercontent.com/mrdoob/three.js/master/examples/textures/waternormals.jpg',
          function (texture) {
            texture.wrapS = texture.wrapT = THREE.RepeatWrapping;
          }
        ),
        sunDirection: new THREE.Vector3(),
        sunColor: 0xffffff,
        waterColor: 0x001e0f,
        distortionScale: 8,
        fog: scene.fog !== undefined,
      });

      water.rotation.x = -Math.PI / 2;

      scene.add(water);

      // Skybox

      const sky = new Sky();
      sky.scale.setScalar(10000);
      scene.add(sky);

      const skyUniforms = sky.material.uniforms;

      skyUniforms['turbidity'].value = 10;
      skyUniforms['rayleigh'].value = 2;
      skyUniforms['mieCoefficient'].value = 0.005;
      skyUniforms['mieDirectionalG'].value = 0.8;

      const parameters = {
        elevation: 2,
        azimuth: 230,
      };

      const pmremGenerator = new THREE.PMREMGenerator(renderer);
      const sceneEnv = new THREE.Scene();

      let renderTarget: THREE.WebGLRenderTarget<THREE.Texture> | undefined;

      function updateSun() {
        const phi = THREE.MathUtils.degToRad(90 - parameters.elevation);
        const theta = THREE.MathUtils.degToRad(parameters.azimuth);

        sun.setFromSphericalCoords(1, phi, theta);

        sky.material.uniforms['sunPosition'].value.copy(sun);
        water.material.uniforms['sunDirection'].value.copy(sun).normalize();

        if (renderTarget !== undefined) renderTarget.dispose();

        sceneEnv.add(sky);
        renderTarget = pmremGenerator.fromScene(sceneEnv);
        scene.add(sky);

        scene.environment = renderTarget.texture;
      }

      updateSun();

      //

      const geometry = new THREE.BoxGeometry(30, 30, 30);
      const material = new THREE.MeshStandardMaterial({ roughness: 0 });

      mesh = new THREE.Mesh(geometry, material);
    //   scene.add(mesh);

      //

      controls = new OrbitControls(camera, renderer.domElement);
      controls.maxPolarAngle = Math.PI * 0.495;
      controls.target.set(0, 10, 0);
      controls.minDistance = 40.0;
      controls.maxDistance = 200.0;
      controls.update();

      //

      //

      window.addEventListener('resize', onWindowResize);
    }

    function onWindowResize() {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();

      renderer.setSize(window.innerWidth, window.innerHeight);
    }

    function animate() {
      render();
    }

    function render() {
      const time = performance.now() * 0.001;

      mesh.position.y = Math.sin(time) * 20 + 5;
      mesh.rotation.x = time * 0.5;
      mesh.rotation.z = time * 0.51;

      water.material.uniforms['time'].value += 1.0 / 60.0;

      renderer.render(scene, camera);
    }
  }}

  
  


}

----- god rays

import { Component, OnInit, AfterViewInit } from '@angular/core';
import * as THREE from 'three';
import { OBJLoader } from 'three/addons/loaders/OBJLoader.js';
import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
import {
  GodRaysFakeSunShader,
  GodRaysDepthMaskShader,
  GodRaysCombineShader,
  GodRaysGenerateShader,
} from 'three/addons/shaders/GodRaysShader.js';

@Component({
  selector: 'app-home',
  templateUrl: './home.component.html',
  styleUrl: './home.component.scss',
})
export class HomeComponent implements OnInit {
  constructor() {}

  scene: any;

  ngOnInit(): void {
    let container: any, stats: any;
    let camera: any,
      scene: THREE.Scene,
      renderer: THREE.WebGLRenderer,
      materialDepth: THREE.MeshDepthMaterial;

    let sphereMesh: any;

    const sunPosition = new THREE.Vector3(0, 1000, -1000);
    const clipPosition = new THREE.Vector4();
    const screenSpacePosition = new THREE.Vector3();

    const postprocessing: any = { enabled: true };

    const orbitRadius = 200;

    const bgColor = 0x000511;
    const sunColor = 0xffee00;

    // Use a smaller size for some of the god-ray render targets for better performance.
    const godrayRenderTargetResolutionMultiplier = 1.0 / 4.0;

    init();

    function init() {
      container = document.getElementById('container');

      //

      camera = new THREE.PerspectiveCamera(
        70,
        window.innerWidth / window.innerHeight,
        1,
        3000
      );
      camera.position.z = 200;

      scene = new THREE.Scene();

      //

      materialDepth = new THREE.MeshDepthMaterial();

      // tree

      const loader = new OBJLoader();
      loader.load('assets/models/tree.obj', function (object) {
        object.position.set(0, -150, -150);
        object.scale.multiplyScalar(400);
        scene.add(object);
      });

      // sphere

      const geo = new THREE.SphereGeometry(1, 20, 10);
      sphereMesh = new THREE.Mesh(
        geo,
        new THREE.MeshBasicMaterial({ color: 0x000000 })
      );
      sphereMesh.scale.multiplyScalar(20);
      scene.add(sphereMesh);

      //

      renderer = new THREE.WebGLRenderer();
      renderer.setClearColor(0xffffff);
      renderer.setPixelRatio(window.devicePixelRatio);
      renderer.setSize(window.innerWidth, window.innerHeight);
      renderer.setAnimationLoop(animate);
      container.appendChild(renderer.domElement);

      renderer.autoClear = false;

      const controls = new OrbitControls(camera, renderer.domElement);
      controls.minDistance = 50;
      controls.maxDistance = 500;

      //

      //

      window.addEventListener('resize', onWindowResize);

      //

      initPostprocessing(window.innerWidth, window.innerHeight);
    }

    //

    function onWindowResize() {
      const renderTargetWidth = window.innerWidth;
      const renderTargetHeight = window.innerHeight;

      camera.aspect = renderTargetWidth / renderTargetHeight;
      camera.updateProjectionMatrix();

      renderer.setSize(renderTargetWidth, renderTargetHeight);
      postprocessing.rtTextureColors.setSize(
        renderTargetWidth,
        renderTargetHeight
      );
      postprocessing.rtTextureDepth.setSize(
        renderTargetWidth,
        renderTargetHeight
      );
      postprocessing.rtTextureDepthMask.setSize(
        renderTargetWidth,
        renderTargetHeight
      );

      const adjustedWidth =
        renderTargetWidth * godrayRenderTargetResolutionMultiplier;
      const adjustedHeight =
        renderTargetHeight * godrayRenderTargetResolutionMultiplier;
      postprocessing.rtTextureGodRays1.setSize(adjustedWidth, adjustedHeight);
      postprocessing.rtTextureGodRays2.setSize(adjustedWidth, adjustedHeight);
    }

    function initPostprocessing(
      renderTargetWidth: number,
      renderTargetHeight: number
    ) {
      postprocessing.scene = new THREE.Scene();

      postprocessing.camera = new THREE.OrthographicCamera(
        -0.5,
        0.5,
        0.5,
        -0.5,
        -10000,
        10000
      );
      postprocessing.camera.position.z = 100;

      postprocessing.scene.add(postprocessing.camera);

      postprocessing.rtTextureColors = new THREE.WebGLRenderTarget(
        renderTargetWidth,
        renderTargetHeight,
        { type: THREE.HalfFloatType }
      );

      // Switching the depth formats to luminance from rgb doesn't seem to work. I didn't
      // investigate further for now.
      // pars.format = LuminanceFormat;

      // I would have this quarter size and use it as one of the ping-pong render
      // targets but the aliasing causes some temporal flickering

      postprocessing.rtTextureDepth = new THREE.WebGLRenderTarget(
        renderTargetWidth,
        renderTargetHeight,
        { type: THREE.HalfFloatType }
      );
      postprocessing.rtTextureDepthMask = new THREE.WebGLRenderTarget(
        renderTargetWidth,
        renderTargetHeight,
        { type: THREE.HalfFloatType }
      );

      // The ping-pong render targets can use an adjusted resolution to minimize cost

      const adjustedWidth =
        renderTargetWidth * godrayRenderTargetResolutionMultiplier;
      const adjustedHeight =
        renderTargetHeight * godrayRenderTargetResolutionMultiplier;
      postprocessing.rtTextureGodRays1 = new THREE.WebGLRenderTarget(
        adjustedWidth,
        adjustedHeight,
        { type: THREE.HalfFloatType }
      );
      postprocessing.rtTextureGodRays2 = new THREE.WebGLRenderTarget(
        adjustedWidth,
        adjustedHeight,
        { type: THREE.HalfFloatType }
      );

      // god-ray shaders

      const godraysMaskShader = GodRaysDepthMaskShader;
      postprocessing.godrayMaskUniforms = THREE.UniformsUtils.clone(
        godraysMaskShader.uniforms
      );
      postprocessing.materialGodraysDepthMask = new THREE.ShaderMaterial({
        uniforms: postprocessing.godrayMaskUniforms,
        vertexShader: godraysMaskShader.vertexShader,
        fragmentShader: godraysMaskShader.fragmentShader,
      });

      const godraysGenShader = GodRaysGenerateShader;
      postprocessing.godrayGenUniforms = THREE.UniformsUtils.clone(
        godraysGenShader.uniforms
      );
      postprocessing.materialGodraysGenerate = new THREE.ShaderMaterial({
        uniforms: postprocessing.godrayGenUniforms,
        vertexShader: godraysGenShader.vertexShader,
        fragmentShader: godraysGenShader.fragmentShader,
      });

      const godraysCombineShader = GodRaysCombineShader;
      postprocessing.godrayCombineUniforms = THREE.UniformsUtils.clone(
        godraysCombineShader.uniforms
      );
      postprocessing.materialGodraysCombine = new THREE.ShaderMaterial({
        uniforms: postprocessing.godrayCombineUniforms,
        vertexShader: godraysCombineShader.vertexShader,
        fragmentShader: godraysCombineShader.fragmentShader,
      });

      const godraysFakeSunShader = GodRaysFakeSunShader;
      postprocessing.godraysFakeSunUniforms = THREE.UniformsUtils.clone(
        godraysFakeSunShader.uniforms
      );
      postprocessing.materialGodraysFakeSun = new THREE.ShaderMaterial({
        uniforms: postprocessing.godraysFakeSunUniforms,
        vertexShader: godraysFakeSunShader.vertexShader,
        fragmentShader: godraysFakeSunShader.fragmentShader,
      });

      postprocessing.godraysFakeSunUniforms.bgColor.value.setHex(bgColor);
      postprocessing.godraysFakeSunUniforms.sunColor.value.setHex(sunColor);

      postprocessing.godrayCombineUniforms.fGodRayIntensity.value = 0.75;

      postprocessing.quad = new THREE.Mesh(
        new THREE.PlaneGeometry(1.0, 1.0),
        postprocessing.materialGodraysGenerate
      );
      postprocessing.quad.position.z = -9900;
      postprocessing.scene.add(postprocessing.quad);
    }

    function animate() {
      render();
    }

    function getStepSize(filterLen: number, tapsPerPass: number, pass: number) {
      return filterLen * Math.pow(tapsPerPass, -pass);
    }

    function filterGodRays(inputTex: any, renderTarget: any, stepSize: number) {
      postprocessing.scene.overrideMaterial =
        postprocessing.materialGodraysGenerate;

      postprocessing.godrayGenUniforms['fStepSize'].value = stepSize;
      postprocessing.godrayGenUniforms['tInput'].value = inputTex;

      renderer.setRenderTarget(renderTarget);
      renderer.render(postprocessing.scene, postprocessing.camera);
      postprocessing.scene.overrideMaterial = null;
    }

    function render() {
      const time = Date.now() / 4000;

      sphereMesh.position.x = orbitRadius * Math.cos(time);
      sphereMesh.position.z = orbitRadius * Math.sin(time) - 100;

      if (postprocessing.enabled) {
        clipPosition.x = sunPosition.x;
        clipPosition.y = sunPosition.y;
        clipPosition.z = sunPosition.z;
        clipPosition.w = 1;

        clipPosition
          .applyMatrix4(camera.matrixWorldInverse)
          .applyMatrix4(camera.projectionMatrix);

        // perspective divide (produce NDC space)

        clipPosition.x /= clipPosition.w;
        clipPosition.y /= clipPosition.w;

        screenSpacePosition.x = (clipPosition.x + 1) / 2; // transform from [-1,1] to [0,1]
        screenSpacePosition.y = (clipPosition.y + 1) / 2; // transform from [-1,1] to [0,1]
        screenSpacePosition.z = clipPosition.z; // needs to stay in clip space for visibilty checks

        // Give it to the god-ray and sun shaders

        postprocessing.godrayGenUniforms['vSunPositionScreenSpace'].value.copy(
          screenSpacePosition
        );
        postprocessing.godraysFakeSunUniforms[
          'vSunPositionScreenSpace'
        ].value.copy(screenSpacePosition);

        // -- Draw sky and sun --

        // Clear colors and depths, will clear to sky color

        renderer.setRenderTarget(postprocessing.rtTextureColors);
        renderer.clear(true, true, false);

        // Sun render. Runs a shader that gives a brightness based on the screen
        // space distance to the sun. Not very efficient, so i make a scissor
        // rectangle around the suns position to avoid rendering surrounding pixels.

        const sunsqH = 0.74 * window.innerHeight; // 0.74 depends on extent of sun from shader
        const sunsqW = 0.74 * window.innerHeight; // both depend on height because sun is aspect-corrected

        screenSpacePosition.x *= window.innerWidth;
        screenSpacePosition.y *= window.innerHeight;

        renderer.setScissor(
          screenSpacePosition.x - sunsqW / 2,
          screenSpacePosition.y - sunsqH / 2,
          sunsqW,
          sunsqH
        );
        renderer.setScissorTest(true);

        postprocessing.godraysFakeSunUniforms['fAspect'].value =
          window.innerWidth / window.innerHeight;

        postprocessing.scene.overrideMaterial =
          postprocessing.materialGodraysFakeSun;
        renderer.setRenderTarget(postprocessing.rtTextureColors);
        renderer.render(postprocessing.scene, postprocessing.camera);

        renderer.setScissorTest(false);

        // -- Draw scene objects --

        // Colors

        scene.overrideMaterial = null;
        renderer.setRenderTarget(postprocessing.rtTextureColors);
        renderer.render(scene, camera);

        // Depth

        scene.overrideMaterial = materialDepth;
        renderer.setRenderTarget(postprocessing.rtTextureDepth);
        renderer.clear();
        renderer.render(scene, camera);

        //

        postprocessing.godrayMaskUniforms['tInput'].value =
          postprocessing.rtTextureDepth.texture;

        postprocessing.scene.overrideMaterial =
          postprocessing.materialGodraysDepthMask;
        renderer.setRenderTarget(postprocessing.rtTextureDepthMask);
        renderer.render(postprocessing.scene, postprocessing.camera);

        // -- Render god-rays --

        // Maximum length of god-rays (in texture space [0,1]X[0,1])

        const filterLen = 1.0;

        // Samples taken by filter

        const TAPS_PER_PASS = 6.0;

        // Pass order could equivalently be 3,2,1 (instead of 1,2,3), which
        // would start with a small filter support and grow to large. however
        // the large-to-small order produces less objectionable aliasing artifacts that
        // appear as a glimmer along the length of the beams

        // pass 1 - render into first ping-pong target
        filterGodRays(
          postprocessing.rtTextureDepthMask.texture,
          postprocessing.rtTextureGodRays2,
          getStepSize(filterLen, TAPS_PER_PASS, 1.0)
        );

        // pass 2 - render into second ping-pong target
        filterGodRays(
          postprocessing.rtTextureGodRays2.texture,
          postprocessing.rtTextureGodRays1,
          getStepSize(filterLen, TAPS_PER_PASS, 2.0)
        );

        // pass 3 - 1st RT
        filterGodRays(
          postprocessing.rtTextureGodRays1.texture,
          postprocessing.rtTextureGodRays2,
          getStepSize(filterLen, TAPS_PER_PASS, 3.0)
        );

        // final pass - composite god-rays onto colors

        postprocessing.godrayCombineUniforms['tColors'].value =
          postprocessing.rtTextureColors.texture;
        postprocessing.godrayCombineUniforms['tGodRays'].value =
          postprocessing.rtTextureGodRays2.texture;

        postprocessing.scene.overrideMaterial =
          postprocessing.materialGodraysCombine;

        renderer.setRenderTarget(null);
        renderer.render(postprocessing.scene, postprocessing.camera);
        postprocessing.scene.overrideMaterial = null;
      } else {
        renderer.setRenderTarget(null);
        renderer.clear();
        renderer.render(scene, camera);
      }
    }
  }
}
